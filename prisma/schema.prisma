generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  name               String
  picture            String?
  email              String              @unique
  clerkId            String?             @unique
  password           String
  phoneNumber        String?             @unique
  locale             String              @default("en-IND")
  emailVerified      Boolean             @default(false)
  twoFactorEnabled   Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  secrets            Secrets?
  addresses          Address[]
  orders             Order[]
  wishlist           Wishlist?
  cart               Cart?
  affiliate          Affiliate?
  reviews            Review[]
  verificationTokens VerificationToken[]
}

model Secrets {
  id                   String   @id @default(cuid())
  password             String?
  lastSignedIn         DateTime @default(now())
  verificationToken    String?
  twoFactorSecret      String?
  twoFactorBackupCodes String[] @default([])
  refreshToken         String?
  resetToken           String?  @unique
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Address {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  street    String
  city      String
  state     String
  country   String
  zipCode   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  orders    Order[]
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  sku         String      @unique
  weight      Float?
  dimensions  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  images      Image[]
  reviews     Review[]
  attributes  Attribute[]
  tags        Tag[]
  wishlists   Wishlist[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Tag {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  products  Product[]
}

model Attribute {
  id        String   @id @default(cuid())
  name      String
  value     String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Category {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  products  Product[]
}

model Image {
  id        String   @id @default(cuid())
  url       String
  altText   String?
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Wishlist {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Order {
  id                 String              @id @default(cuid())
  user               User                @relation(fields: [userId], references: [id])
  userId             String
  totalPrice         Float
  status             OrderStatus         @default(PENDING)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
  items              OrderItem[]
  address            Address             @relation(fields: [addressId], references: [id])
  addressId          String
  trackingNumber     String?
  paymentStatus      PaymentStatus       @default(PENDING)
  affiliate          Affiliate?          @relation(fields: [affiliateId], references: [id])
  affiliateId        String?
  affiliateReferrals AffiliateReferral[]
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  discount  Float? // Optional discount on the item
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Affiliate {
  id                 String              @id @default(cuid())
  user               User                @relation(fields: [userId], references: [id])
  userId             String              @unique
  referralCode       String              @unique
  commissionRate     Float               @default(0.05)
  totalCommission    Float               @default(0.0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
  affiliateReferrals AffiliateReferral[]
  affiliatePayments  AffiliatePayment[]
  orders             Order[]
}

model AffiliateReferral {
  id          String    @id @default(cuid())
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
  affiliateId String
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     String
  commission  Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model AffiliatePayment {
  id            String        @id @default(cuid())
  affiliate     Affiliate     @relation(fields: [affiliateId], references: [id])
  affiliateId   String
  amount        Float
  paymentStatus PaymentStatus @default(PENDING)
  paymentDate   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
